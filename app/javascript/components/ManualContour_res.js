// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as AnchorPoint from "./AnchorPoint_res.js";
import * as ReactKonva from "react-konva";
import * as ControlPoint from "./ControlPoint_res.js";
import * as Core__Option from "@rescript/core/src/Core__Option_res.js";
import * as JsxRuntime from "react/jsx-runtime";

function calculateControlPoints(figure) {
  var x1Float = figure.x1;
  var y1Float = figure.y1;
  return [
          {
            x: x1Float * 0.95 | 0,
            y: (figure.y1 + figure.y2 | 0) / 2 | 0,
            id: 1
          },
          {
            x: (figure.x1 + figure.x2 | 0) / 2 | 0,
            y: y1Float * 0.9 | 0,
            id: 2
          },
          {
            x: figure.x2 * 1.05 | 0,
            y: (figure.y2 + figure.y1 | 0) / 2 | 0,
            id: 3
          },
          {
            x: (figure.x1 + figure.x2 | 0) / 2 | 0,
            y: figure.y2 * 1.05 | 0,
            id: 4
          }
        ];
}

function ManualContour(props) {
  var onChangeFigure = props.onChangeFigure;
  var figure = props.figure;
  var anchors = [
    {
      x: figure.anchor_point_1_x,
      y: figure.anchor_point_1_y,
      id: 1
    },
    {
      x: figure.anchor_point_2_x,
      y: figure.anchor_point_2_y,
      id: 2
    },
    {
      x: figure.anchor_point_3_x,
      y: figure.anchor_point_3_y,
      id: 3
    },
    {
      x: figure.anchor_point_4_x,
      y: figure.anchor_point_4_y,
      id: 4
    }
  ];
  var anchorElements = anchors.map(function (point) {
        return JsxRuntime.jsx(AnchorPoint.make, {
                    point: point,
                    figure: figure,
                    onChangeFigure: onChangeFigure
                  }, String(point.id));
      });
  var controlPoints = [
    {
      x: figure.control_point_1_x,
      y: figure.control_point_1_y,
      id: 1
    },
    {
      x: figure.control_point_2_x,
      y: figure.control_point_2_y,
      id: 2
    },
    {
      x: figure.control_point_3_x,
      y: figure.control_point_3_y,
      id: 3
    },
    {
      x: figure.control_point_4_x,
      y: figure.control_point_4_y,
      id: 4
    }
  ];
  var controlPointElements = controlPoints.map(function (point) {
        return JsxRuntime.jsx(ControlPoint.make, {
                    point: point,
                    onChangeFigure: onChangeFigure,
                    figure: figure
                  }, String(point.id));
      });
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsx(ReactKonva.Shape, {
                      sceneFunc: (function (konvaContext, shape) {
                          konvaContext.beginPath();
                          var start = anchors[0];
                          if (start !== undefined) {
                            konvaContext.moveTo(start.x, start.y);
                          } else {
                            console.log("point is null");
                          }
                          for(var index = 1; index <= 3; ++index){
                            Core__Option.forEach(anchors[index], (function(index){
                                return function (anchor) {
                                  Core__Option.forEach(controlPoints[index], (function (controlPoint) {
                                          konvaContext.quadraticCurveTo(controlPoint.x, controlPoint.y, anchor.x, anchor.y);
                                        }));
                                }
                                }(index)));
                          }
                          var firstControlPoint = controlPoints[0];
                          var firstAnchor = anchors[0];
                          konvaContext.quadraticCurveTo(firstControlPoint.x, firstControlPoint.y, firstAnchor.x, firstAnchor.y);
                          konvaContext.fillStrokeShape(shape);
                        }),
                      strokeWidth: 4,
                      stroke: "red"
                    }),
                anchorElements,
                controlPointElements
              ]
            });
}

var make = ManualContour;

var $$default = ManualContour;

export {
  calculateControlPoints ,
  make ,
  $$default as default,
}
/* react Not a pure module */
