// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from 'react'
import * as AnchorPoint from './AnchorPoint'
import * as ReactKonva from 'react-konva'
import * as ControlPoint from './ControlPoint'

function calculateControlPoints (figure) {
  const x1Float = figure.x1
  const y1Float = figure.y1
  return [
    {
      x: x1Float * 0.95 | 0,
      y: (figure.y1 + figure.y2 | 0) / 2 | 0,
      id: 1
    },
    {
      x: (figure.x1 + figure.x2 | 0) / 2 | 0,
      y: y1Float * 0.9 | 0,
      id: 2
    },
    {
      x: figure.x2 * 1.05 | 0,
      y: (figure.y2 + figure.y1 | 0) / 2 | 0,
      id: 3
    },
    {
      x: (figure.x1 + figure.x2 | 0) / 2 | 0,
      y: figure.y2 * 1.05 | 0,
      id: 4
    }
  ]
}

function ManualContour (props) {
  const onChangeFigure = props.onChangeFigure
  const figure = props.figure
  const anchors = [
    {
      x: figure.anchor_point_1_x,
      y: figure.anchor_point_1_y,
      id: 1
    },
    {
      x: figure.anchor_point_2_x,
      y: figure.anchor_point_2_y,
      id: 2
    },
    {
      x: figure.anchor_point_3_x,
      y: figure.anchor_point_3_y,
      id: 3
    },
    {
      x: figure.anchor_point_4_x,
      y: figure.anchor_point_4_y,
      id: 4
    }
  ]
  const anchorElements = anchors.map(function (point) {
    return (
      <AnchorPoint
        point={point}
        key={point.id}
        figure={figure}
        onChangeFigure={onChangeFigure}
      />
    )
  })
  const controlPoints = [
    {
      x: figure.control_point_1_x,
      y: figure.control_point_1_y,
      id: 1
    },
    {
      x: figure.control_point_2_x,
      y: figure.control_point_2_y,
      id: 2
    },
    {
      x: figure.control_point_3_x,
      y: figure.control_point_3_y,
      id: 3
    },
    {
      x: figure.control_point_4_x,
      y: figure.control_point_4_y,
      id: 4
    }
  ]
  const controlPointElements = controlPoints.map(function (point) {
    return (
      <ControlPoint
        point={point}
        onChangeFigure={onChangeFigure}
        figure={figure}
        key={point.id}
      />
    )
  })
  return (
    <>
      <ReactKonva.Shape
        sceneFunc={function (konvaContext, shape) {
          konvaContext.beginPath()
          const start = anchors[0]
          if (start !== undefined) {
            konvaContext.moveTo(start.x, start.y)
          } else {
            console.log('point is null')
          }
          for (let index = 1; index <= 3; ++index) {
            anchors[index].forEach(function (index) {
              return function (anchor) {
                controlPoints[index].forEach(function (controlPoint) {
                  konvaContext.quadraticCurveTo(controlPoint.x, controlPoint.y, anchor.x, anchor.y)
                })
              }
            })
          }
          const firstControlPoint = controlPoints[0]
          const firstAnchor = anchors[0]
          konvaContext.quadraticCurveTo(firstControlPoint.x, firstControlPoint.y, firstAnchor.x, firstAnchor.y)
          konvaContext.fillStrokeShape(shape)
        }}
        strokeWidth={4}
        stroke='red'
      />
      {anchorElements}
      {controlPointElements}
    </>
  )
}

const make = ManualContour

const $$default = ManualContour

export {
  calculateControlPoints,
  make,
  $$default as default
}
/* react Not a pure module */
